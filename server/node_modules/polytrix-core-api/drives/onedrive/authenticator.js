var request = require('request');
var Q = require('q');
var Authenticator = require('../authenticator');
var https = require('https');
var url = require('url');
var querystring = require("querystring");

module.exports = Authenticator(function(method,access_token,api_url,options,auth_in_header){
	options = options || {};

	options.url = api_url;
	options.expectedStatus = options.expectedStatus || 200;

	if(!auth_in_header){
		options.qs = options.qs || {};
		options.qs.access_token = access_token;
	}else{
		options.headers = options.headers || {};
		options.headers.Authorization = "Bearer " + access_token;
	}

	// if(method === 'MOVE' || method === 'move' ||
	// 	method === 'COPY' || method === 'copy'){
	// 	return lowLevelRequest(method,access_token,api_url,options);
	// }


	return Q.Promise(function(resolve,reject){
		options.method = method.toUpperCase();
		request(
			options,
			function(error,response,body){
				if(!error){
					if(response.statusCode == options.expectedStatus){
						resolve(body);
					}else{
						console.log('response.statusCode: ' + response.statusCode);
						if(typeof body === 'string'){
							body = JSON.parse(body);
						}
						body.status = response.statusCode;
						console.log(body);
						reject(body);
					}
				}else{
					reject(error);
				}
			}
		);
	});
});


function lowLevelRequest(method,access_token,api_url,options){
	method = method.toUpperCase();
	if(options.qs){
		if(options.url.indexOf('?') == -1){
			options.url += '?' + JSON.stringify(options.qs);
		}else{
			options.url += '&' + JSON.stringify(options.qs);
		}
	}
	var urlObj = url.parse(options.url);

	var postData = '';
	var request_options = {
		hostname: urlObj.hostname,
		port: urlObj.port,
		path: urlObj.path,
		method: method
	};
	if(options.headers){
		request_options.headers = options.headers;
	}
	if(options.json){
		postData = JSON.stringify(options.json);
		request_options.headers['Content-Type'] = 'application/json';
	}
	if(options.form){
		postData = querystring.stringify(options.form);
		request_options.headers['Content-Type'] = 'application/x-www-form-urlencoded';
	}
	if(options.body){
		postData = options.body;
	}
	request_options.headers['Content-Length'] = postData.length;

	return Q.Promise(function(resolve,reject){
		var req = https.request(request_options, function(res) {
			var body = '';
			res.setEncoding('utf8');
			res.on('data', function (chunk) {
				body += chunk;
			});
			res.on('end',function(){
				onResponse(null,res,body);
			});
		});
		req.on('error', function(e) {
			onResponse(e);
		});

		req.write(postData);
		req.end();

		function onResponse(error,response,body){

			if(!error){
				if(response.statusCode == options.expectedStatus){
					if(options.json)
						body = JSON.parse(body);
					resolve(body);
				}else{
					console.log('response.statusCode: ' + response.statusCode);
					if(typeof body === 'string'){
						body = JSON.parse(body);
					}
					body.status = response.statusCode;
					console.log(body);
					reject(body);
				}
			}else{
				reject(error);
			}
		}
	});
	
}