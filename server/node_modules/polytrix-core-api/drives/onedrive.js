var filefog = require('filefog'),
	request = require('request'),
	Q = require('q'),
	config = require('./config').onedrive;

filefog.use('onedrive',require('filefog-onedrive'),{
	client_key : config.client_key,
	client_secret : config.client_secret,
	scope: config.scope,
	redirect_url: config.redirect_url
});

var onedriveProvider = filefog.provider('onedrive');

//
//===== public functions =====
//
var getAuthURL = function(){
	return onedriveProvider.oAuthGetAuthorizeUrl();
};

var getToken = function(code){
	console.log('onedrive.js setToken');
	return onedriveProvider.oAuthGetAccessToken(code)
	.then(function(results)
	{
		console.log(results);
		return {
			driveid: 'od' + results.user_id,
			expires_on: results.expires_on, /*new Date(results.expires_on)*/
			access_token: results.access_token,
			refresh_token: results.refresh_token
		};
	})
	.catch(function(err){
		console.log(err);
		return err;
	});	
};

var renewToken = function(refresh_token){
	console.log('onedrive.js renewToken');
	return onedriveProvider.oAuthRefreshAccessToken({refresh_token:refresh_token})
	.then(function(newOAuthData){
		console.log('core api onedrive renewToken() token got:');
		console.log(newOAuthData);
		return newOAuthData;
	})
	.catch(function(err){
		console.log('core api onedrive renewToken() error');
		console.log(err);
		return err;
	});
};

//	
//	@method getFileIndex
//	@params{string} location
//	@params{string} access_token
//	@params{string} refresh_token
//	@return-promise-value: fileIndex
//
var getFileIndex = function(location,access_token,refresh_token){
	console.log('onedrive.js getFileIndex');
	console.log('location:' + location);
	return filefog.client("onedrive", {
		access_token: access_token,
		refresh_token: refresh_token
	})
	.then(function (client) {
		return client.retrieveFolderItems(location);
	}).then(function(result){
		result.success = true;
		result.content = result.content.map(function(file){
			if(file._raw.type == 'album'){
				file.is_file = false,
				file.is_folder = true
			}
			return file;
		});
		return result;
	}).catch(function (err){
		console.log(err);
		var result = {
			success: false,
			msg: 'one drive error'
		}
		return result;
	});
};

//
//	@method downloadFilePipe
//	@params{string} location
//	@params{string} access_token
//	@params{string} refresh_token
//
var downloadFileLink = function(location,access_token,refresh_token){
	return Q.Promise(function(resolve,reject){
		request.get('https://apis.live.net/v5.0/'+location+
			'/content?suppress_redirects=true&download=true&access_token=' + access_token,
			function(error,response,body){
				if(!error){
					if(response.statusCode == 200){
						body = JSON.parse(body);
						resolve(body.location);
					}else{
						console.log('response.statusCode: ' + response.statusCode);
						console.log(body);
						reject(body);
					}
				}else{
					reject(error);
				}
			}
		);
	});
};


//  padding to replace pipe
//
//	@method downloadFilePipe
//	@params{string} location
//	@params{string} access_token
//	@params{string} refresh_token
//
var downloadFilePipe = function(location,access_token,refresh_token,res){
	return Q.Promise(function(resolve,reject){
		request.get('https://apis.live.net/v5.0/'+location+
			'/content?suppress_redirects=true&download=true&access_token=' + access_token,
			function(error,response,body){
				if(!error){
					if(response.statusCode == 200){
						body = JSON.parse(body);
						res.redirect(body.location);
						resolve('success');
					}else{
						console.log('response.statusCode: ' + response.statusCode);
						console.log(body);
						reject(body);
					}
				}else{
					reject(error);
				}
			}
		);
	});
};

//	@method downloadFile
//	@params{string} location
//	@params{string} access_token
//	@params{string} refresh_token
//	@return-promise-value: {file,contentType,contentLength}
//
var downloadFile = function(location,access_token,refresh_token){
	refresh_token = null;//dropbox no refresh token
	
	return filefog.client("onedrive", {
		access_token: access_token,
		refresh_token: refresh_token
	})
	.then(function (client) {
		return client.downloadFile(location);
	}).then(function (data){
		console.log(data);
		var result = {
			success: true,
			file: data.data,
			contentType: data.headers['content-type'],
			contentLength: data.headers['content-length']
		};
		return result;
	}).catch(function (err){
		console.log(err);
		var result = {
			success: false,
			msg: 'your request is not found'//no error message receive from one drive filefog
		}
		return result;
	});
};

var getFolderInformation = function(location,access_token,refresh_token){
	console.log('onedrive.js getFolderInformation');
	console.log('location:' + location);
	return filefog.client("onedrive", {
		access_token: access_token,
		refresh_token: refresh_token
	})
	.then(function (client) {
		return client.getFolderInformation(location);
	}).then(function(result){
		result.success = true;
		console.log(result);
		return result;
	}).catch(function (err){
		console.log(err);
		var result = {
			success: false,
			msg: 'one drive error'
		}
		return result;
	});
};

module.exports = {
	rootIdentifier: 'me/skydrive',
	getAuthURL: getAuthURL,
	getToken: getToken,
	getFileIndex: getFileIndex,
	downloadFile: downloadFile,
	downloadFileLink: downloadFileLink,
	downloadFilePipe: downloadFilePipe,
	getFolderInformation: getFolderInformation,
	renewToken: renewToken,
};










// onedriveProvider.oAuthRefreshAccessToken = function(refresh_token){

// };

//override the default filefog method to fix CERT_UNSTRUSTED error
onedriveProvider.oAuthGetAccessToken = function(code){
	console.log('onedrive.js oAuthGetAccessToken');
	return Q.Promise(function(resolve,reject){
		request.post(
			'https://login.live.com/oauth20_token.srf',
			{
				form: {
					code: code,
					grant_type: 'authorization_code',
					client_id: config.client_key,
					client_secret: config.client_secret,
					redirect_uri: config.redirect_url
				},
				rejectUnauthorized: false,	// bypass CERT_UNTRUSTED error
				requestCert: true			//
			},
			function (error, response, body) {
				if(error)
					reject(error);
				else if (response.statusCode !== 200) {
					reject(new Error("response status not 200, statusCode:" + response.statusCode));
				}else{
					body = JSON.parse(body);

					var now = new Date();
					now.setTime(now.getTime() + body.expires_in * 1000);//1000 for millisecond
					body.expires_on = now;
					resolve(body);
				}
			}
		);
	});
};