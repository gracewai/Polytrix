//
//	Service.js
//	This is the standard class and wrapper for all drive services
//

// auth
//	authUrl()
//	getToken(code)
//	renewToken(refresh_token)

// info
//	accountInfo(access_token,refresh_token)
//	usageQouta(access_token,refresh_token)

// metadata
//	get(access_token,refresh_token,fileId)
//	listFile(access_token,refresh_token,fileId)
//	downloadUrl(access_token,refresh_token,fileId)

// operation
//	create(access_token,refresh_token,destinationFileId,...(filename,etc.))
//	rename(access_token,refersh_token,fileId,...(filename,etc.))
//	move(access_token,refresh_token,fileId,destinationFileId)
//	copy(access_token,refresh_token,fileId,destinationFileId)
//	delete(access_token,refresh_token,fileId)

// stream
//	createAndUploadStream(access_token,refresh_token,destinationFileId,...(filename,etc.))
//	uploadStream(access_token,refresh_token,fileId,...(patches?))
//	downloadStream(access_token,refresh_token,fileId)

// share
//	list(access_token,refresh_token,fileId)
//	get(access_token,refresh_token,fileId)
//	new(access_token,refresh_token,fileId,...)
//	update(access_token,refresh_token,fileId,...)
//	remove(access_token,refresh_token,fileId)


var Service = function(serviceProvider){
	this.provider = serviceProvider;
	this.auth.provider = serviceProvider;
	this.info.provider = serviceProvider;
	this.operation.provider = serviceProvider;
	this.stream.provider = serviceProvider;
	this.share.provider = serviceProvider;
	this.rootIdentifier = this.provider.rootIdentifier;
};

// auth

Service.prototype.auth = {
	authUrl: function(){
		return this.provider.authUrl();
	},

	getToken: function(code){
		return this.provider.getToken(code);
	},

	renewToken: function(refresh_token){
		return this.provider.renewToken(refresh_token);
	},
};



// info

Service.prototype.info = {
	accountInfo: function(access_token,refresh_token){
		return this.provider.accountInfo(access_token,refresh_token);
	},

	usageQouta: function(access_token,refresh_token){
		return this.provider.usageQouta(access_token,refresh_token);
	},
};


// metadata

Service.prototype.metadata = {
	get: function(access_token,refresh_token,fileId){
		return this.provider.get(access_token,refresh_token,fileId);
	},

	listFile: function(access_token,refresh_token,fileId){
		return this.provider.listFile(access_token,refresh_token,fileId);
	},

	downloadUrl: function(access_token,refresh_token,fileId){
		return this.provider.downloadUrl(access_token,refresh_token,fileId);
	},
};


// operation

Service.prototype.operation = {
	create: function(access_token,refresh_token,destinationFileId,    others){
		return this.provider.create(access_token,refresh_token,destinationFileId,    others);
	},

	rename: function(access_token,refresh_token,fileId,    others){
		return this.provider.rename(access_token,refresh_token,fileId,    others);
	},

	move: function(access_token,refresh_token,fileId,destinationFileId){
		return this.provider.move(access_token,refresh_token,fileId,destinationFileId);
	},

	copy: function(access_token,refresh_token,fileId,destinationFileId){
		return this.provider.copy(access_token,refresh_token,fileId,destinationFileId);
	},

	delete: function(access_token,refresh_token,fileId){
		return this.provider.delete(access_token,refresh_token,fileId);
	},
};


// stream

Service.prototype.stream = {
	createAndUploadStream: function(access_token,refresh_token,destinationFileId,   others){
		return this.provider.createAndUploadStream(access_token,refresh_token,destinationFileId,    others);
	},

	uploadStream: function(access_token,refresh_token,fileId,   others){
		return this.provider.uploadStream(access_token,refresh_token,fileId,    others);
	},

	downloadStream: function(access_token,refresh_token,fileId){
		return this.provider.downloadStream(access_token,refresh_token,fileId);
	},
};


// share

Service.prototype.share = {
	list: function(access_token,refresh_token,fileId){
		return this.provider.list(access_token,refresh_token,fileId);
	},

	get: function(access_token,refresh_token,fileId){
		return this.provider.get(access_token,refresh_token,fileId);
	},

	new: function(access_token,refresh_token,fileId,   others){
		return this.provider.new(access_token,refresh_token,fileId,   others);
	},

	update: function(access_token,refresh_token,fileId,   others){
		return this.provider.update(access_token,refresh_token,fileId,   others);
	},

	remove: function(access_token,refresh_token,fileId){
		return this.provider.remove(access_token,refresh_token,fileId);
	},
};













//===============================
//	deprecated



Service.prototype.accountInfo = function(){
	return this.provider.accountInfo();
};

//	
//	@method getAuthURL
//	@return{string} authorization_url
//
Service.prototype.getAuthURL = function(access_token,refresh_token){
	return this.provider.getAuthURL(access_token,refresh_token);
};

//
//	@method getToken
//	@params{string} code
//	@return-promise-value{
//		driveid: String,
//		expires_on: Date,
//		access_token: String,
//		refresh_token: String (null for dropbox)
//	} result
//
Service.prototype.getToken = function(code){
	return this.provider.getToken(code);
};

//
//	@method renewToken
//	@params{string} refresh_token
//	@return-promise-value{oAuthData} renewToken		please refer to return type of getToken() method.
//
Service.prototype.renewToken = function(refresh_token){
	return this.provider.renewToken(refresh_token);
};

//	
//	@method getFileIndex
//	@params{string} location
//	@params{string} access_token
//	@params{string} refresh_token
//	@return-promise-value: {
//		"total_items":null,
//		"content":[
//			{
//				"is_file":true,
//				"is_folder":false,
//				"etag":"157b1a04db6a",
//				"identifier":"/._AST10303-Tut09.doc",
//				"parent_identifier":"",
//				"created_date":"2013-11-24T06:27:00.000Z",
//				"modified_date":"2013-11-24T06:27:00.000Z",
//				"name":"._AST10303-Tut09.doc",
//				"description":"",
//				"checksum":null,
//				"file_size":4096,
//				"_raw":{...}
//			}
//		]
//	} fileIndex
//
Service.prototype.getFileIndex = function(location,access_token,refresh_token){
	console.log('getting ' + location);
	return this.provider.getFileIndex(location,access_token,refresh_token);
};

//	
//	@method downloadFile
//	@params{string} location
//	@params{string} access_token
//	@params{string} refresh_token
//	@return-promise-value: {
//			success: Boolean,
//			file: Buffer,
//			contentType: String,
//			contentLength: String,
//			contentDisposition: String
//		} file
//
Service.prototype.downloadFile = function(location,access_token,refresh_token){
	return this.provider.downloadFile(location,access_token,refresh_token);
};

Service.prototype.getFolderInformation = function(location,access_token,refresh_token){
	return this.provider.getFolderInformation(location,access_token,refresh_token);
};

//	
//	@method downloadFilePipe
//	@params{string} location
//	@params{string} access_token
//	@params{string} refresh_token
//	@params{response} res
//	@return{promise}
//
Service.prototype.downloadFilePipe = function(location,access_token,refresh_token,res){
	return this.provider.downloadFilePipe(location,access_token,refresh_token,res);
};

//	
//	@method downloadFileLink
//	@params{string} location
//	@params{string} access_token
//	@params{string} refresh_token
//	@return-promise-value: {string} download_url
//
Service.prototype.downloadFileLink = function(location,access_token,refresh_token){
	return this.provider.downloadFileLink(location,access_token,refresh_token);
};

Service.prototype.getQouta = function(access_token,refresh_token){
	return this.provider.getQouta(access_token,refresh_token);
};

Service.prototype.uploadFileMultipartPipe = function(destination, access_token, refresh_token, multipartHandler){

};


module.exports = Service; 