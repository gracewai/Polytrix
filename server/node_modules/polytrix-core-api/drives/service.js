//
//	Service.js
//	This is the standard class and wrapper for all drive services
//

// auth
//	authUrl()
//	getToken(code)
//	renewToken(refresh_token)

// info
//	accountInfo(access_token,refresh_token)
//	usageQouta(access_token,refresh_token)

// metadata
//	get(access_token,refresh_token,fileId)
//	listFile(access_token,refresh_token,fileId)
//	downloadUrl(access_token,refresh_token,fileId)

// operation
//	create(access_token,refresh_token,destinationFileId,...(filename,etc.))
//	rename(access_token,refersh_token,fileId,...(filename,etc.))
//	move(access_token,refresh_token,fileId,destinationFileId)
//	copy(access_token,refresh_token,fileId,destinationFileId)
//	delete(access_token,refresh_token,fileId)

// stream
//	createAndUploadStream(access_token,refresh_token,destinationFileId,...(filename,etc.))
//	uploadStream(access_token,refresh_token,fileId,...(patches?))
//	downloadStream(access_token,refresh_token,fileId)

// share
//	list(access_token,refresh_token,fileId)
//	get(access_token,refresh_token,fileId)
//	new(access_token,refresh_token,fileId,...)
//	update(access_token,refresh_token,fileId,...)
//	remove(access_token,refresh_token,fileId)
var Client = require('./client');


var Service = function(serviceProvider){
	this.provider = serviceProvider;
	this.auth.provider = serviceProvider;
	this.info.provider = serviceProvider;
	this.operation.provider = serviceProvider;
	this.stream.provider = serviceProvider;
	this.share.provider = serviceProvider;
	this.rootIdentifier = this.provider.rootIdentifier;
};

// auth

Service.prototype.auth = {
	authUrl: function(){
		return this.provider.auth.authUrl();
	},

	getToken: function(code){
		return this.provider.auth.getToken(code);
	},

	renewToken: function(refresh_token){
		return this.provider.auth.renewToken(refresh_token);
	},
};



// info

Service.prototype.info = {
	accountInfo: function(access_token,refresh_token){
		return this.provider.info.accountInfo(access_token,refresh_token);
	},

	usageQouta: function(access_token,refresh_token){
		return this.provider.info.usageQouta(access_token,refresh_token);
	},
};


// metadata

Service.prototype.metadata = {
	get: function(access_token,refresh_token,fileId){
		return this.provider.metadata.get(access_token,refresh_token,fileId);
	},

	listFile: function(access_token,refresh_token,fileId){
		return this.provider.metadata.listFile(access_token,refresh_token,fileId);
	},

	downloadUrl: function(access_token,refresh_token,fileId){
		return this.provider.metadata.downloadUrl(access_token,refresh_token,fileId);
	},
};


// operation

Service.prototype.operation = {
	create: function(access_token,refresh_token,destinationFileId,    others){
		return this.provider.operation.create(access_token,refresh_token,destinationFileId,    others);
	},

	rename: function(access_token,refresh_token,fileId,    others){
		return this.provider.operation.rename(access_token,refresh_token,fileId,    others);
	},

	move: function(access_token,refresh_token,fileId,destinationFileId){
		return this.provider.operation.move(access_token,refresh_token,fileId,destinationFileId);
	},

	copy: function(access_token,refresh_token,fileId,destinationFileId){
		return this.provider.operation.copy(access_token,refresh_token,fileId,destinationFileId);
	},

	delete: function(access_token,refresh_token,fileId){
		return this.provider.operation.delete(access_token,refresh_token,fileId);
	},
};


// stream

Service.prototype.stream = {
	createAndUploadStream: function(access_token,refresh_token,destinationFileId,filename){
		return this.provider.stream.createAndUploadStream(access_token,refresh_token,destinationFileId,filename);
	},

	uploadStream: function(access_token,refresh_token,fileId,overwrite,parent_rev){
		return this.provider.stream.uploadStream(access_token,refresh_token,fileId,overwrite,parent_rev);
	},

	downloadStream: function(access_token,refresh_token,fileId){
		return this.provider.stream.downloadStream(access_token,refresh_token,fileId);
	},
};


// share

Service.prototype.share = {
	list: function(access_token,refresh_token,fileId){
		return this.provider.share.list(access_token,refresh_token,fileId);
	},

	get: function(access_token,refresh_token,fileId){
		return this.provider.share.get(access_token,refresh_token,fileId);
	},

	new: function(access_token,refresh_token,fileId,   others){
		return this.provider.share.new(access_token,refresh_token,fileId,   others);
	},

	update: function(access_token,refresh_token,fileId,   others){
		return this.provider.share.update(access_token,refresh_token,fileId,   others);
	},

	remove: function(access_token,refresh_token,fileId){
		return this.provider.share.remove(access_token,refresh_token,fileId);
	},
};

Service.client = function(access_token,refresh_token){
	return new Client(this,access_token,refresh_token);
};

module.exports = Service; 