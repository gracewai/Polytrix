var filefog = require('filefog'),
	request = require('request'),
	Q = require('q'),
	config = require('./config').googledrive;

filefog.use('googledrive',require('filefog-google'),{
	client_key : config.client_key,
	client_secret : config.client_secret,
	scope : config.scope,
	redirect_url: config.redirect_url,
	approval_prompt: 'force'
});

var googledriveProvider = filefog.provider('googledrive');


// General api authenticator

var authenticator = function(access_token,refresh_token,method,api_url,json,expectedStatus){
	expectedStatus = expectedStatus || 200;
	return Q.Promise(function(resolve,reject){
		request[method]({
			url:api_url,
			json:json||{},
			headers:{
				Authorization: "Bearer " + access_token
			}},
			function(error,response,body){
				if(!error){
					if(response.statusCode == expectedStatus){
						console.log(body);
						resolve(body);
					}else{
						console.log('response.statusCode: ' + response.statusCode);
						console.log(body);
						reject(body);
					}
				}else{
					reject(error);
				}
			}
		);
	});
};



//
//===== public functions =====
//
var getAuthURL = function(){
	return 'https://accounts.google.com/o/oauth2/auth?' +
	'approval_prompt=force&access_type=offline&scope=' +
	'https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fuserinfo.email%20' + 
	config.scope + 
	'&response_type=code&' +
	'client_id=' + config.client_key +
	'&redirect_uri=' + 	config.redirect_url;
	//return googledriveProvider.oAuthGetAuthorizeUrl();
}

var getToken = function(code){
	console.log('googledrive.js setToken');
	return googledriveProvider.oAuthGetAccessToken(code)
	.then(function(results)
	{
		console.log(results);
		return {
			expires_on: new Date(results.expires_on),
			access_token: results.access_token,
			refresh_token: results.refresh_token
		};
	})
	.catch(function(err){
		console.log(err);
		return err;
	});
};

var renewToken = function(refresh_token){
	console.log('googledrive.js renewToken');
	return googledriveProvider.oAuthRefreshAccessToken({refresh_token:refresh_token})
	.then(function(newOAuthData){
		console.log('core api googledrive renewToken() token got:');
		console.log(newOAuthData);
		return newOAuthData;
	})
	.catch(function(err){
		console.log('core api googledrive renewToken() error');
		console.log(err);
		return err;
	});
};

var accountInfo = function(access_token,refresh_token){
	refresh_token = null;//dropbox no refresh token
	return filefog.client("googledrive", {
		access_token: access_token,
		refresh_token: refresh_token
	})
	.then(function (client) {
		return client.accountInfo();
	});
};

//	
//	@method getFileIndex
//	@params{string} location
//	@params{string} access_token
//	@params{string} refresh_token
//	@return-promise-value: fileIndex
//
var getFileIndex = function(location,access_token,refresh_token){
	console.log('googledrive.js getFileIndex');
	return googledriveClient = filefog.client("googledrive", {
		access_token: access_token,
		refresh_token: refresh_token
	})
	.then(function (client) {
		return client.retrieveFolderItems(location);
	}).then(function(result){
		result.success = true;
		return result;
	}).catch(function (err){
		console.log(err);
		var result = {
			success: false,
			msg: err.code==404 ? '404 file not found' : err.message
		}
		return result;
	});
};

// this method temperantly share the file to public
// and close the file sharing after 1 second
//
var downloadFileLink = function(location,access_token,refresh_token,res){
	var metadata;
	var url = 'https://www.googleapis.com/drive/v2/files/' + location
	
	return authenticator(access_token,refresh_token,'get',url)
	.then(function(body){
		metadata = JSON.parse(body);
		return 'OK';
	})
	.then(function(okString){
		var url = 'https://www.googleapis.com/drive/v2/files/' + metadata.id + '/permissions';
		var json = {
						role: 'reader',
						type: 'anyone',
					};
		return authenticator(access_token,refresh_token,'post',url,json)
		.then(function(body){
			return body.id;
		})
	})
	.then(function(permissionId){
		//remove the permission after one second
		setTimeout(function(){
			var url = 'https://www.googleapis.com/drive/v2/files/' + metadata.id + '/permissions/' + permissionId;
			authenticator(access_token,refresh_token,'del',url,{},204)
			.catch(function(err){
				console.log(err);
			});
		},1000);

		return metadata.webContentLink;
	});
};

var downloadFilePipe = function(location,access_token,refresh_token,res){

};

//	
//	@method downloadFile
//	@params{string} location
//	@params{string} access_token
//	@params{string} refresh_token
//	@return-promise-value: {file,contentType,contentLength}
//
var downloadFile = function(location,access_token,refresh_token){
	console.log('googledrive.js downloadFile');
	return filefog.client("googledrive", {
		access_token: access_token,
		refresh_token: refresh_token
	})
	.then(function (client) {
		return client.downloadFile(location);
	}).then(function (data){
		console.log('data:');
		console.log(data);
		var result = {
			success: true,
			file: data.data,
			contentType: data.headers['content-type'],
			contentLength: data.headers['content-length'],
			contentDisposition: data.headers['content-disposition']
		};
		return result;
	}).catch(function (err){
		if(err.message == 'Invalid Credentials'){
			//
		}
		console.log(err);
		var result = {
			success: false,
			msg: err.code==404 ? '404 file not found' : err.message
		}
		return result;
	});
};

var getFolderInformation = function(location,access_token,refresh_token){
	console.log('googledrive.js getFolderInformation');
	console.log('location:' + location);

	return googledriveClient = filefog.client("googledrive", {
		access_token: access_token,
		refresh_token: refresh_token
	})
	.then(function (client) {
		return client.getFolderInformation(location);
	}).then(function(result){
		result.success = true;
		console.log(location);
		return result;
	}).catch(function (err){
		console.log(err);
		var result = {
			success: false,
			msg: err.code==404 ? '404 file not found' : err.message
		}
		return result;
	});
};

var getUsageQouta = function(access_token,refresh_token){
	var url = 'https://www.googleapis.com/drive/v2/about';
	return authenticator(access_token,refresh_token,'get',url)
	.then(function(body){
		result = {
			username: body.name,
			totalQuota: body.quotaBytesTotal,
			usedQuota: body.quotaBytesUsed
		};
		return result;
	});
};

module.exports = {
	rootIdentifier: 'root',
	accountInfo:accountInfo,
	getAuthURL: getAuthURL,
	getToken: getToken,
	getFileIndex: getFileIndex,
	downloadFile: downloadFile,
	downloadFileLink: downloadFileLink,
	downloadFilePipe: downloadFilePipe,
	getFolderInformation: getFolderInformation,
	renewToken: renewToken,
	getQouta:getUsageQouta,
};