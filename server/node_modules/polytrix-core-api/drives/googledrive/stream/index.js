var Q = require('q');
var request = require('request');
var Metadata = require('../metadata');
// stream
//	createAndUploadStream(access_token,refresh_token,destinationFileId,...(filename,etc.))
//	uploadStream(access_token,refresh_token,fileId,...(patches?))
//	downloadStream(access_token,refresh_token,fileId)

module.exports.createAndUploadStream = function(access_token,refresh_token,destinationFileId,readStream,mimeType,filename){
	return Q.Promise(function(resolve,reject,notify){
		var req = request.post({
			url:'https://www.googleapis.com/upload/drive/v2/files/',
			qs:{
				uploadType:'multipart',
			},
			headers:{
				Authorization: "Bearer " + access_token
			},
			multipart:[
				{
					'content-type': 'application/json',
					body: JSON.stringify({
						title:filename,
						parents:[destinationFileId]
					})
				},
				{
					'content-type': mimeType,
					body: readStream
				}
			]
		});
		resolve(req);
	});
};
module.exports.uploadStream = function(access_token,refresh_token,fileId,readStream,mimeType,overwrite,parent_rev){
	return Q.Promise(function(resolve,reject,notify){
		var options = {
			url:'https://www.googleapis.com/upload/drive/v2/files/' + fileId,
			qs:{
				uploadType:'multipart',
			},
			headers:{
				Authorization: "Bearer " + access_token
			},
			multipart:[
				{
					'content-type': 'application/json',
					body: JSON.stringify({
					})
				},
				{
					'content-type': mimeType,
					body: readStream
				}
			]
		};
		if(parent_rev) options.qs.newRevision = true;
		var req = request.put(options);
		resolve(req);
	});
};
module.exports.downloadStream = function(access_token,refresh_token,fileId){
	return Metadata.get(access_token,refresh_token,fileId)
	.then(function(metadata){
		
		return Q.Promise(function(resolve,reject,notify){
			var req = request.get({
				url:metadata._raw.downloadUrl,
				headers:{
					Authorization: "Bearer " + access_token
				}}
			);
			req.on('response', function(response) {
				resolve(response);
			});
			req.on('error', function(error){
				reject(error);
			});
		});
	});
	
};
