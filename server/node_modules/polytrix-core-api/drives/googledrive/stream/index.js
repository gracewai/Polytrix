var Q = require('q');
var request = require('request');
var Metadata = require('../metadata');
var transform = require('filefog-google').transform;
var PassThrough = require('stream').PassThrough;
var mime = require('mime');
// stream
//	createAndUploadStream(access_token,refresh_token,destinationFileId,readStream,mimeType,filename)
//	uploadStream(access_token,refresh_token,fileId,readStream,mimeType,overwrite,parent_rev)
//	downloadStream(access_token,refresh_token,fileId)

module.exports.createAndUploadStream = function(access_token,refresh_token,destinationFileId,readStream,mimeType,filename){
	mimeType = mimeType || mime.lookup(filename);
	return Q.Promise(function(resolve,reject,notify){
		var req = request.post({
			url:'https://www.googleapis.com/upload/drive/v2/files/',
			qs:{
				uploadType:'multipart',
			},
			headers:{
				Authorization: "Bearer " + access_token
			},
			multipart:[
				{
					'content-type': 'application/json',
					body: JSON.stringify({
						title:filename,
						parents:[{id:destinationFileId}]
					})
				},
				{
					'content-type': mimeType,
					body: readStream
				}
			]
		},
		function(error,response,body){
				if(!error){
					if(response.statusCode === 200){
						resolve(body);
					}else{
						console.log('response.statusCode: ' + response.statusCode);
						if(typeof body === 'string'){
							body = JSON.parse(body);
						}
						body.status = response.statusCode;
						console.log(body);
						reject(body);
					}
				}else{
					reject(error);
				}
			});
		//resolve(req);
	})
	.then(function(body){
		return transform.getFileInformation(JSON.parse(body));
	}).then(function(body){
		body.success = true;
		return body;
	})
	.catch(function(err){
		return transformError(err);
	});
};
module.exports.uploadStream = function(access_token,refresh_token,fileId,readStream,mimeType,overwrite,parent_rev){

	return Q.Promise(function(resolve,reject,notify){
		var options = {
			url:'https://www.googleapis.com/upload/drive/v2/files/' + fileId,
			qs:{
				uploadType:'multipart',
			},
			headers:{
				Authorization: "Bearer " + access_token
			},
			multipart:[
				{
					'content-type': 'application/json',
					body: JSON.stringify({
					})
				},
				{
					'content-type': mimeType,
					body: readStream
				}
			]
		};
		if(!mimeType){
			delete options.multipart[1]['content-type'];
		}
		if(parent_rev) options.qs.newRevision = true;
		var req = request.put(options,
			function(error,response,body){
				if(!error){
					if(response.statusCode === 200){
						resolve(body);
					}else{
						console.log('response.statusCode: ' + response.statusCode);
						if(typeof body === 'string'){
							body = JSON.parse(body);
						}
						body.status = response.statusCode;
						console.log(body);
						reject(body);
					}
				}else{
					reject(error);
				}
			});
		//resolve(req);
	})
	.then(function(body){
		return transform.getFileInformation(JSON.parse(body));
	}).then(function(body){
		body.success = true;
		return body;
	})
	.catch(function(err){
		return transformError(err);
	});
};
module.exports.downloadStream = function(access_token,refresh_token,fileId){
	return Metadata.get(access_token,refresh_token,fileId)
	.then(function(metadata){
		
		return Q.Promise(function(resolve,reject,notify){
			var req = request.get({
				url:metadata._raw.downloadUrl,
				headers:{
					Authorization: "Bearer " + access_token
				}}
			);
			var myResponse = new PassThrough();
			req.pipe(myResponse);
			req.on('response', function(response) {
				if(response.statusCode == 200){
					myResponse.mimeType = response.headers['content-type'];
                    myResponse.httpVersion = response.httpVersion;
                    myResponse.headers = response.headers;
					resolve(myResponse);
				}else{
                    var body = '';
					console.log('response.statusCode: ' + response.statusCode);
					if(typeof body === 'string'){
						body = JSON.parse(body);
					}
					body.status = response.statusCode;
					console.log(body);
					reject(body);
				}
			});
			req.on('error', function(error){
				reject(error);
			});
			//resolve(req);
		});
	});
	
};

function transformError(err){
	console.log(err);
	var result = {
		success: false,
		error_code: err.code,
		msg: err.code==404 ? '404 file not found' : err.message
	};
	return result;
}