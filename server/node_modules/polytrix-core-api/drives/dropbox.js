var filefog = require('filefog'),
	request = require('request'),
	Q = require('q'),
	config = require('./config').dropbox;

filefog.use('dropbox',require('filefog-dropbox'),{
	client_key : config.client_key,
	client_secret : config.client_secret,
	redirect_url: config.redirect_url,
	force_reapprove : 'true'
});

var dropboxProvider = filefog.provider('dropbox');


//
//===== public functions =====
//
var getAuthURL = function(){
	return dropboxProvider.oAuthGetAuthorizeUrl();
};

var getToken = function(code){
	return dropboxProvider.oAuthGetAccessToken(code)
	.then(function(results)
	{
		console.log(results);
		return {
			driveid: 'db' + results._raw.uid,
			expires_on: new Date(results.expires_on),
			access_token: results.access_token,
			refresh_token: null
		};
	})
	.catch(function(err){
		console.log(err);
		return err;
	});
};

var renewToken = function(refresh_token){
	console.log('dropbox.js renewToken');
	console.log('!logical ERROR, should not call renewToken for dropbox');
	return Q.fcall('should not call renewToken for dropbox');
};

var accountInfo = function(access_token,refresh_token){
	refresh_token = null;//dropbox no refresh token
	return filefog.client("dropbox", {
		access_token: access_token,
		refresh_token: refresh_token
	})
	.then(function (client) {
		return client.accountInfo();
	});
};

//	
//	@method getFileIndex
//	@params{string} location
//	@params{string} access_token
//	@params{string} refresh_token
//	@return-promise-value: fileIndex
//
var getFileIndex = function(location,access_token,refresh_token){
	refresh_token = null;//dropbox no refresh token

	console.log(location);

	return filefog.client("dropbox", {
		access_token: access_token,
		refresh_token: null
	})
	.then(function (client) {
		return client.retrieveFolderItems(location);
	}).then(function(result){
		result.success = true;
		return result;
	}).catch(function (err){
		console.log(err);
		var result = {
			success: false,
			msg: err.status==404 ? '404 file not found' : err.response.error
		}
		return result;
	});
};

var downloadFileLink = function(location,access_token,refresh_token){
	return Q.Promise(function(resolve,reject,notify){
		request.get({
			url:'https://api.dropbox.com/1/media/auto/' + location,
			headers:{
				Authorization: "Bearer " + access_token
			}}
			,function(error,response,body){
				if(!error){
					if(response.statusCode == 200){
						body = JSON.parse(body);
						console.log('dropbox link?');
						console.log(body);
						resolve(body.url);
					}else{
						console.log('response.statusCode: ' + response.statusCode);
						console.log(body);
						reject(body);
					}
				}else{
					reject(error);
				}
			}
		);
	});
};

var downloadFilePipe = function(location,access_token,refresh_token,res){
	refresh_token = null;//dropbox no refresh token
	return Q.Promise(function(resolve,reject,notify){
		request.get({
			url:'https://api-content.dropbox.com/1/files/auto/' + location,
			headers:{
				Authorization: "Bearer " + access_token
			}}
		).on('response', function(response) {
			// unmodified http.IncomingMessage object

			//set header to user response
			res.header(response.headers);

			//initial values to determine progress
			var len = response.headers['content-length'];
			var received = 0;

			response.on('data', function(data) {
				// compressed data as it is received

				//send out the data to user
				res.write(data);

				//progress
				received+=data.length;
				var progress = received/len;

				//notify progress
				notify(progress);

				//if success
				if(progress == 1){
					res.end();
					resolve('success');
				}
			});
		});
	});
};
//	
//	@method downloadFile
//	@params{string} location
//	@params{string} access_token
//	@params{string} refresh_token
//	@return-promise-value: {file,contentType,contentLength}
//
var downloadFile = function(location,access_token,refresh_token){
	refresh_token = null;//dropbox no refresh token
	
	return filefog.client("dropbox", {
		access_token: access_token,
		refresh_token: refresh_token
	})
	.then(function (client) {
		return client.downloadFile(location);
	}).then(function (data){
		console.log(data);
		
		var result = {
			success: true,
			file: data.data,
			contentType: data._raw.stat.mimeType,
			contentLength: data._raw.stat.size
		};
		return result;
	}).catch(function (err){
		console.log(err);
		var result = {
			success: false,
			msg: err.status==404 ? '404 file not found' : err.response.error
		}
		return err;
	});
};

var getFolderInformation = function(location,access_token,refresh_token){
	console.log('dropbox.js getFolderInformation');
	console.log('location:' + location);

	return filefog.client("dropbox", {
		access_token: access_token,
		refresh_token: null
	})
	.then(function (client) {
		return client.getFolderInformation(location);
	}).then(function(result){
		result.success = true;
		console.log(result);
		return result;
	}).catch(function (err){
		console.log(err);
		var result = {
			success: false,
			msg: err.status==404 ? '404 file not found' : err.response.error
		}
		return result;
	});
};

module.exports = {
	rootIdentifier: '/',
	accountInfo:accountInfo,
	getAuthURL: getAuthURL,
	getToken: getToken,
	getFileIndex: getFileIndex,
	downloadFile: downloadFile,
	downloadFilePipe: downloadFilePipe,
	downloadFileLink: downloadFileLink,
	getFolderInformation: getFolderInformation,
	renewToken: renewToken,
};