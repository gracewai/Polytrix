var filefog = require('filefog'),
	request = require('request'),
	Q = require('q'),
	config = require('./config').dropbox;

filefog.use('dropbox',require('filefog-dropbox'),{
	client_key : config.client_key,
	client_secret : config.client_secret,
	redirect_url: config.redirect_url
});

var dropboxProvider = filefog.provider('dropbox');


//
//===== public functions =====
//
var getAuthURL = function(){
	return dropboxProvider.oAuthGetAuthorizeUrl();
}

var getToken = function(code){
	return dropboxProvider.oAuthGetAccessToken(code)
	.then(function(results)
	{
		console.log(results);
		return {
			access_token: results.access_token,
			refresh_token: null
		};
	})
	.catch(function(err){
		console.log(err);
		return err;
	});
};

//	
//	@method getFileIndex
//	@params{string} location
//	@params{string} access_token
//	@params{string} refresh_token
//	@return-promise-value: fileIndex
//
var getFileIndex = function(location,access_token,refresh_token){
	refresh_token = null;//dropbox no refresh token

	console.log(location);
	console.log(access_token);

	return filefog.client("dropbox", {
		access_token: access_token,
		refresh_token: null
	})
	.then(function (client) {
		return client.retrieveFolderItems(location);
	}).then(function(result){
		result.success = true;
		return result;
	}).catch(function (err){
		console.log(err);
		var result = {
			success: false,
			msg: err.status==404 ? '404 file not found' : err.response.error
		}
		return result;
	});
};


//	
//	This method pipe the downloadFile so that no delay for download files
//
//	@method downloadFilePipe
//	@params{string} location
//	@params{string} access_token
//	@params{string} refresh_token
//	@return-promise-value: {file,contentType,contentLength}
//
var downloadFilePipe = function(location,access_token,refresh_token,res){
	refresh_token = null;//dropbox no refresh token
	return Q.Promise(function(resolve,reject,notify){
		var req = request.get({
			url:'https://api-content.dropbox.com/1/files/auto/' + location,
			headers:{
				Authorization: "Bearer " + access_token
			}}
		);

		req.pipe(res);
		req.on('response', function(response) {
			// unmodified http.IncomingMessage object

			//initial values to determine progress
			var total = response.headers['content-length'];
			var received = 0;

			if(response.statusCode == 200){
				response.on('data', function(data) {
					// compressed data as it is received

					//progress
					received+=data.length;
					var progress = received/total;

					//notify progress
					notify({
						progress:progress,
						received: received,
						total: total
					});

					//if success
					if(progress == 1){
						resolve('success');
					}
				});
			// }else if(response.statusCode == 404){
			// 	reject('404 file not found');
			}else{
				var msg = '';
				req.on('data',function(data){
					msg+=data;
				});
				req.on('end',function(){
					msg = JSON.parse(msg);
					reject(msg);
				});
			}
		});
	});
};
// var downloadFilePipe = function(location,access_token,refresh_token,res){
// 	refresh_token = null;//dropbox no refresh token
// 	return Q.Promise(function(resolve,reject,notify){
// 		request.get({
// 			url:'https://api-content.dropbox.com/1/files/auto/' + location,
// 			headers:{
// 				Authorization: "Bearer " + access_token
// 			}}
// 		).on('response', function(response) {
// 			// unmodified http.IncomingMessage object

// 			//set header to user response
// 			res.header(response.headers);

// 			//initial values to determine progress
// 			var len = response.headers['content-length'];
// 			var received = 0;

// 			response.on('data', function(data) {
// 				// compressed data as it is received

// 				//send out the data to user
// 				res.write(data);

// 				//progress
// 				received+=data.length;
// 				var progress = received/len;

// 				//notify progress
// 				notify(progress);

// 				//if success
// 				if(progress == 1){
// 					res.end();
// 					resolve('success');
// 				}
// 			});
// 		});
// 	});
// };
//	
//	@method downloadFile
//	@params{string} location
//	@params{string} access_token
//	@params{string} refresh_token
//	@return-promise-value: {file,contentType,contentLength}
//
var downloadFile = function(location,access_token,refresh_token){
	refresh_token = null;//dropbox no refresh token
	
	return filefog.client("dropbox", {
		access_token: access_token,
		refresh_token: refresh_token
	})
	.then(function (client) {
		return client.downloadFile(location);
	}).then(function (data){
		console.log(data);

		var result = {
			success: true,
			file: data.data,
			contentType: data._raw.stat.mimeType,
			contentLength: data._raw.stat.size
		};
		return result;
	}).catch(function (err){
		console.log(err);
		var result = {
			success: false,
			msg: err.status==404 ? '404 file not found' : err.response.error
		}
		return err;
	});
};

module.exports.getAuthURL = getAuthURL;
module.exports.getToken = getToken;
module.exports.getFileIndex = getFileIndex;
module.exports.downloadFile = downloadFile;
module.exports.downloadFilePipe = downloadFilePipe;