var Q = require('q');
var request = require('request');
var PassThrough = require('stream').PassThrough;

// stream
//	createAndUploadStream(access_token,refresh_token,destinationFileId,readStream,mimeType,filename)
//	uploadStream(access_token,refresh_token,fileId,readStream,mimeType,overwrite,parent_rev)
//	downloadStream(access_token,refresh_token,fileId)

module.exports.createAndUploadStream = function(access_token,refresh_token,destinationFileId,readStream,mimeType,filename){
	return Q.Promise(function(resolve,reject,notify){
		var req = request.put({
			url:'https://api-content.dropbox.com/1/files_put/auto/' + destinationFileId + '/' + filename,
			qs:{
				overwrite:false
			},
			headers:{
				Authorization: "Bearer " + access_token
			}},
			function(error,response,body){
				if(!error){
					if(response.statusCode === 200){
						resolve(body);
					}else{
						console.log('response.statusCode: ' + response.statusCode);
						if(typeof body === 'string'){
							body = JSON.parse(body);
						}
						body.status = response.statusCode;
						console.log(body);
						reject(body);
					}
				}else{
					reject(error);
				}
			}
		);
		readStream.pipe(req);
		//resolve(req);
	})
	.then(function(body){
		return transform(JSON.parse(body));
	})
	.catch(function(err){
		return transformError(err);
	});
};
module.exports.uploadStream = function(access_token,refresh_token,fileId,readStream,mimeType,overwrite,parent_rev){//overwirte or upload as a version
	return Q.Promise(function(resolve,reject,notify){
		var options = {
			url:'https://api-content.dropbox.com/1/files_put/auto/' + fileId,
			qs:{
				overwrite:overwrite
			},
			headers:{
				Authorization: "Bearer " + access_token
			}
		};
		if(parent_rev)
			options.qs.parent_rev = parent_rev;
			var req = request.put(options,
			function(error,response,body){
				if(!error){
					if(response.statusCode === 200){
						resolve(body);
					}else{
						console.log('response.statusCode: ' + response.statusCode);
						if(typeof body === 'string'){
							body = JSON.parse(body);
						}
						body.status = response.statusCode;
						console.log(body);
						reject(body);
					}
				}else{
					reject(error);
				}
			});
		readStream.pipe(req);
		//resolve(req);
	})
	.then(function(body){
		return transform(JSON.parse(body));
	})
	.catch(function(err){
		return transformError(err);
	});
};
module.exports.downloadStream = function(access_token,refresh_token,fileId){
	return Q.Promise(function(resolve,reject,notify){
		var req = request.get({
			url:'https://api-content.dropbox.com/1/files/auto/' + fileId,
			headers:{
				Authorization: "Bearer " + access_token
			}}
		);
		var myResponse = new PassThrough();
		req.pipe(myResponse);
		req.on('response', function(response) {
			if(response.statusCode === 200){
				myResponse.mimeType = response.headers['content-type'];
                myResponse.httpVersion = response.httpVersion;
                myResponse.headers = response.headers;
				resolve(myResponse);
			}else{
				var body = '';
				console.log('response.statusCode: ' + response.statusCode);
				response.setEncoding('utf8');
				response.on('data',function(chunk){
					body += chunk;
				});
				response.on('end',function(){
					body = JSON.parse(body);
					body.status = response.statusCode;
					reject(body);
				});
			}
		});
		req.on('error', function(error){
			reject(error);
		});
		//resolve(req);
	})
	.catch(function(error){
		return transformError(error);
	});
};


function transform(body){
	var data = {
		success:true,
		identifier:body.path,
		name:body.path.split('/').pop(),
		_raw:body
	};
	return data;
}

function transformError(err){
	console.log(err);
	var result = {
		success: false,
		error_code: err.status,
		msg: err.status==404 ? '404 file not found' : err.error
	};
	if(err instanceof Error){
		console.log(err.stack);
		result.error_code = 500;
		result.msg = err.message;
	}
	return result;
}