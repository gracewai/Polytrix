var Q = require('q');
var authenticator = require('../authenticator');
var path = require('path');
// operation
//	create(access_token,refresh_token,destinationFileId,is_folder,filename)
//	rename(access_token,refersh_token,fileId,newName)
//	move(access_token,refresh_token,fileId,destinationFileId)
//	copy(access_token,refresh_token,fileId,destinationFileId)
//	delete(access_token,refresh_token,fileId)

module.exports.create = function(access_token,refresh_token,destinationFileId,is_folder,filename){
	if(!is_folder){
		return createBlankFile(access_token,destinationFileId,filename);
	}else{
		return createFolder(access_token,destinationFileId,filename);
	}
};

function createBlankFile(access_token,destinationFileId,filename){
	var url = 'https://api-content.dropbox.com/1/files_put/auto/'+destinationFileId+'/'+filename;
	return authenticator.put(access_token,url,{qs:{overwrite:false}})
	.then(function(body){
		return transform(JSON.parse(body));
	})
	.then(function(data){
		data.success = true;
		return data;
	})
	.catch(function(err){
		return transformError(err);
	});
}
// {
// 	"revision": 26198,
// 	"bytes": 0,
// 	"thumb_exists": false,
// 	"rev": "66561a04db6a",
// 	"modified": "Thu, 19 Feb 2015 11:02:14 +0000",
// 	"shareable": false,
// 	"mime_type": "text/plain",
// 	"path": "/c++/testing.txt",
// 	"is_dir": false,
// 	"size": "0 bytes",
// 	"root": "dropbox",
// 	"client_mtime":
// 	"Thu, 19 Feb 2015 11:02:14 +0000",
// 	"icon": "page_white_text"
// }

function createFolder(access_token,destinationFileId,foldername){
	var url = 'https://api.dropbox.com/1/fileops/create_folder';
	return authenticator.post(access_token,url,{qs:{
		root:'auto',
		path:destinationFileId+'/'+foldername
	}})
	.then(function(body){
		return transform(JSON.parse(body));
	})
	.catch(function(err){
		return transformError(err);
	});
}
// { read_only: false,
//   revision: 26202,
//   bytes: 0,
//   thumb_exists: false,
//   rev: '665a1a04db6a',
//   modified: 'Thu, 19 Feb 2015 13:36:11 +0000',
//   size: '0 bytes',
//   path: '/c++/testing0.31640067929401994',
//   is_dir: true,
//   modifier: null,
//   root: 'dropbox',
//   icon: 'folder' }

module.exports.rename = function(access_token,refresh_token,fileId,newName){
	var url = 'https://api.dropbox.com/1/fileops/move';
	var path_arr = fileId.split('/');
	path_arr[path_arr.length-1] = newName;
	var newPath = path_arr.join('/');
	return authenticator.post(access_token,url,{qs:{
		root: 'auto',
		from_path:fileId,
		to_path:newPath,
	}})
	.then(function(body){
		return transform(JSON.parse(body));
	})
	.catch(function(err){
		return transformError(err);
	});
};

module.exports.move = function(access_token,refresh_token,fileId,destinationFileId){
	var url = 'https://api.dropbox.com/1/fileops/move';
	var filename = fileId.split('/').pop();
	return authenticator.post(access_token,url,{qs:{
		root: 'auto',
		from_path:fileId,
		to_path:destinationFileId + '/' + filename,
	}})
	.then(function(body){
		return transform(JSON.parse(body));
	})
	.catch(function(err){
		return transformError(err);
	});
};

module.exports.copy = function(access_token,refresh_token,fileId,destinationFileId){
	var url = 'https://api.dropbox.com/1/fileops/copy';
	var filename = fileId.split('/').pop();
	return authenticator.post(access_token,url,{qs:{
		root: 'auto',
		from_path:fileId,
		to_path:destinationFileId + '/' + filename,
	}})
	.then(function(body){
		return transform(JSON.parse(body));
	})
	.catch(function(err){
		return transformError(err);
	});
};

module.exports.delete = function(access_token,refresh_token,fileId){
	var url = 'https://api.dropbox.com/1/fileops/delete';
	return authenticator.post(access_token,url,{qs:{
		root: 'auto',
		path:fileId,
	}})
	.then(function(body){
		return transform(JSON.parse(body));
	})
	.catch(function(err){
		return transformError(err);
	});
};

function transform(body){
	var data = {
		success:true,
		identifier:body.path,
		name:body.path.split('/').pop(),
		_raw:body
	};
	return data;
}

function transformError(err){
	console.log(err);
	var result = {
		success: false,
		error_code: err.status,
		msg: err.status==404 ? '404 file not found' : err.error
	};
	return result;
}