
var Client = function(serviceProvider,access_token,refresh_token){
	this.provider = serviceProvider;
	this.auth = new Auth(serviceProvider);
	this.info = new Info(serviceProvider);
	this.metadata = new Metadata(serviceProvider);
	this.operation = new Operation(serviceProvider);
	this.stream = new Stream(serviceProvider);
	this.share = new Share(serviceProvider);
	this.rootIdentifier = this.provider.rootIdentifier;
	var tokens = {
		access_token:access_token,
		refresh_token:refresh_token
	};
	this.tokens = tokens;
	this.auth.tokens = tokens;
	this.info.tokens = tokens;
	this.metadata.tokens = tokens;
	this.operation.tokens = tokens;
	this.stream.tokens = tokens;
	this.share.tokens = tokens;
};

var Auth = function(provider){this.provider = provider;};
Auth.prototype = {
	authUrl: function(){
		return this.provider.auth.authUrl();
	},

	getToken: function(code){
		return this.provider.auth.getToken(code);
	},

	renewToken: function(){
		var _this = this;
		return this.provider.auth.renewToken(this.tokens.refresh_token)
		.then(function(renewData){
			if(renewData.access_token)_this.tokens.access_token = renewData.access_token;
			return renewData;
		});
	},
};



// info
var Info = function(provider){this.provider = provider;};
Info.prototype = {
	accountInfo: function(){
		return this.provider.info.accountInfo(this.tokens.access_token,this.tokens.refresh_token);
	},

	usageQouta: function(){
		return this.provider.info.usageQouta(this.tokens.access_token,this.tokens.refresh_token);
	},
};


// metadata
var Metadata = function(provider){this.provider = provider;};
Metadata.prototype = {
	get: function(fileId){
		return this.provider.metadata.get(this.tokens.access_token,this.tokens.refresh_token,fileId);
	},

	listFile: function(fileId){
		return this.provider.metadata.listFile(this.tokens.access_token,this.tokens.refresh_token,fileId);
	},

	downloadUrl: function(fileId){
		return this.provider.metadata.downloadUrl(this.tokens.access_token,this.tokens.refresh_token,fileId);
	},
};


// operation
var Operation = function(provider){this.provider = provider;};
Operation.prototype = {
	create: function(destinationFileId,is_folder,filename){
		return this.provider.operation.create(this.tokens.access_token,this.tokens.refresh_token,destinationFileId,is_folder,filename);
	},

	rename: function(fileId,newName){
		return this.provider.operation.rename(this.tokens.access_token,this.tokens.refresh_token,fileId,newName);
	},

	move: function(fileId,destinationFileId){
		return this.provider.operation.move(this.tokens.access_token,this.tokens.refresh_token,fileId,destinationFileId);
	},

	copy: function(fileId,destinationFileId){
		return this.provider.operation.copy(this.tokens.access_token,this.tokens.refresh_token,fileId,destinationFileId);
	},

	delete: function(fileId){
		return this.provider.operation.delete(this.tokens.access_token,this.tokens.refresh_token,fileId);
	},
};


// stream
var Stream = function(provider){this.provider = provider;};
Stream.prototype = {
	createAndUploadStream: function(destinationFileId,filename){
		return this.provider.stream.createAndUploadStream(this.tokens.access_token,this.tokens.refresh_token,destinationFileId,filename);
	},

	uploadStream: function(fileId,overwrite,parent_rev){
		return this.provider.stream.uploadStream(this.tokens.access_token,this.tokens.refresh_token,fileId,overwrite,parent_rev);
	},

	downloadStream: function(fileId){
		return this.provider.stream.downloadStream(this.tokens.access_token,this.tokens.refresh_token,fileId);
	},
};


// share
var Share = function(provider){this.provider = provider;};
Share.prototype = {
	list: function(fileId){
		return this.provider.share.list(this.tokens.access_token,this.tokens.refresh_token,fileId);
	},

	get: function(fileId){
		return this.provider.share.get(this.tokens.access_token,this.tokens.refresh_token,fileId);
	},

	new: function(fileId,   others){
		return this.provider.share.new(this.tokens.access_token,this.tokens.refresh_token,fileId,   others);
	},

	update: function(fileId,   others){
		return this.provider.share.update(this.tokens.access_token,this.tokens.refresh_token,fileId,   others);
	},

	remove: function(fileId){
		return this.provider.share.remove(this.tokens.access_token,this.tokens.refresh_token,fileId);
	},
};

module.exports = Client;
