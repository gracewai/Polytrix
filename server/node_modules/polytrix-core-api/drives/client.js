
var Client = function(service,access_token,refresh_token){
	this.provider = service;
	this.access_token = access_token;
	this.refresh_token = refresh_token;
};

Client.prototype.auth = {
	authUrl: function(){
		return this.provider.auth.authUrl();
	},

	getToken: function(code){
		return this.provider.auth.getToken(code);
	},

	renewToken: function(){
		return this.provider.auth.renewToken(this.refresh_token);
	},
};



// info

Client.prototype.info = {
	accountInfo: function(){
		return this.provider.info.accountInfo(this.access_token,this.refresh_token);
	},

	usageQouta: function(){
		return this.provider.info.usageQouta(this.access_token,this.refresh_token);
	},
};


// metadata

Client.prototype.metadata = {
	get: function(fileId){
		return this.provider.metadata.get(this.access_token,this.refresh_token,fileId);
	},

	listFile: function(fileId){
		return this.provider.metadata.listFile(this.access_token,this.refresh_token,fileId);
	},

	downloadUrl: function(fileId){
		return this.provider.metadata.downloadUrl(this.access_token,this.refresh_token,fileId);
	},
};


// operation

Client.prototype.operation = {
	create: function(destinationFileId,    others){
		return this.provider.operation.create(this.access_token,this.refresh_token,destinationFileId,    others);
	},

	rename: function(fileId,    others){
		return this.provider.operation.rename(this.access_token,this.refresh_token,fileId,    others);
	},

	move: function(fileId,destinationFileId){
		return this.provider.operation.move(this.access_token,this.refresh_token,fileId,destinationFileId);
	},

	copy: function(fileId,destinationFileId){
		return this.provider.operation.copy(this.access_token,this.refresh_token,fileId,destinationFileId);
	},

	delete: function(fileId){
		return this.provider.operation.delete(this.access_token,this.refresh_token,fileId);
	},
};


// stream

Client.prototype.stream = {
	createAndUploadStream: function(destinationFileId,filename){
		return this.provider.stream.createAndUploadStream(this.access_token,this.refresh_token,destinationFileId,filename);
	},

	uploadStream: function(fileId,overwrite,parent_rev){
		return this.provider.stream.uploadStream(this.access_token,this.refresh_token,fileId,overwrite,parent_rev);
	},

	downloadStream: function(fileId){
		return this.provider.stream.downloadStream(this.access_token,this.refresh_token,fileId);
	},
};


// share

Client.prototype.share = {
	list: function(fileId){
		return this.provider.share.list(this.access_token,this.refresh_token,fileId);
	},

	get: function(fileId){
		return this.provider.share.get(this.access_token,this.refresh_token,fileId);
	},

	new: function(fileId,   others){
		return this.provider.share.new(this.access_token,this.refresh_token,fileId,   others);
	},

	update: function(fileId,   others){
		return this.provider.share.update(this.access_token,this.refresh_token,fileId,   others);
	},

	remove: function(fileId){
		return this.provider.share.remove(this.access_token,this.refresh_token,fileId);
	},
};

module.exports = Client;
