var services = require('../main');
var Q = require('q');
var should = require('should');
var fs = require('fs');
var tesseract = services.tesseract.client(
        /*access_token*/ 'abuWw06dof/g60QJjGv+ltMC61w=',
        /*refresh_token*/ '62592f8efd98aea02d5d6fcf870d83034030b3f2d0df6bb2e666619b26f3a117e6135da23558f170'
    );

describe('Refresh Token', function() {
    it('should return a token',function(done){
        tesseract.auth.renewToken().then(function(renewData){
            renewData.should.have.property('access_token');
        }).then(done,done);
    });
});

describe('Usage Quota',function(){
    it('should return transformed data',function(done){
        tesseract.info.usageQouta().then(function(data){
            data.should.be.ok;
            data.should.have.property('total_bytes');
            data.should.have.property('used_bytes');
            data.should.have.property('_raw');
        }).then(done,done);
    });
});

describe('Listing file of',function() {
    describe('root folder with empty id', function () {
        it('should return a transformed data', function (done) {
            tesseract.metadata.listFile().then(function (data) {
                data.should.be.ok;
                data.should.have.property('content');
                data.content.should.be.array;
            }).then(done, done);
        });
    });

    describe('folder with id', function () {
        it('should return a transformed data', function (done) {
            tesseract.metadata.listFile('0e2fa86dce6dd8ee66a25e6c7caf0eeeb6779b3d').then(function (data) {
                data.should.be.ok;
                data.success.should.equal(true);
                data.should.have.property('content');
                data.content.should.be.array;
            }).then(done, done);
        });
    });

    describe('not exist folder', function () {
        it('should return a 404 error', function (done) {
            tesseract.metadata.listFile('dfrdhttr').then(function (data) {
                data.should.be.ok;
                data.success.should.equal(false);
                data.error_code.should.equal(404);
            }).then(done, done);
        });
    });
});

describe('Getting metadata of',function(){
    describe('root folder with empty id',function(){
        it('should return a transformed data',function(done){
            tesseract.metadata.get().then(function(data){
                data.should.be.ok;
                data.success.should.equal(true);
                data.is_file.should.equal(false);
                data.is_folder.should.equal(true);
                data.should.have.property('identifier');
                data.should.have.property('parent_identifier');
                data.should.have.property('created_date');
                data.should.have.property('modified_date');
                data.should.have.property('name');
                data.should.have.property('description');
                data.should.have.property('_raw');
            }).then(done,done);
        });
    });

    describe('folder with id',function(){
        it('should return a transformed data',function(done){
            tesseract.metadata.get('0e2fa86dce6dd8ee66a25e6c7caf0eeeb6779b3d').then(function(data){
                data.should.be.ok;
                data.success.should.equal(true);
                data.is_file.should.equal(false);
                data.is_folder.should.equal(true);
                data.should.have.property('identifier');
                data.should.have.property('parent_identifier');
                data.should.have.property('created_date');
                data.should.have.property('modified_date');
                data.should.have.property('name');
                data.should.have.property('description');
                data.should.have.property('_raw');
            }).then(done,done);
        });
    });

    describe('file with id',function(){
        it('should return a transformed data',function(done){
            tesseract.metadata.get('b29a98fd160b3b741fe8d767860cb51ecd983392').then(function(data){
                data.should.be.ok;
                data.success.should.equal(true);
                data.is_file.should.equal(true);
                data.is_folder.should.equal(false);
                data.should.have.property('identifier');
                data.should.have.property('parent_identifier');
                data.should.have.property('created_date');
                data.should.have.property('modified_date');
                data.should.have.property('name');
                data.should.have.property('description');
                data.should.have.property('_raw');
            }).then(done,done);
        });
    });

    describe('not exist file',function(){
        it('should return a 404 error',function(done){
            tesseract.metadata.get('tafidje').then(function(data){
                data.should.be.ok;
                data.success.should.equal(false);
                data.error_code.should.equal(404);
            }).then(done,done);
        });
    });
});

describe.skip('Create', function() {
    describe('file',function(){
        it('should return success response',function(done){
            tesseract.operation.create('0e2fa86dce6dd8ee66a25e6c7caf0eeeb6779b3d',false,'testing' + Math.random() + '.txt')
                .then(function(response){
                    response.success.should.equal(true);
                    response.identifier.should.be.ok;
                    response.name.should.be.ok;
                }).then(done,done);
        });
    });

    describe('folder',function(){
        it('should return success response',function(done){
            tesseract.operation.create('0e2fa86dce6dd8ee66a25e6c7caf0eeeb6779b3d',true,'testing' + Math.random())
                .then(function(response){
                    response.success.should.equal(true);
                    response.identifier.should.be.ok;
                    response.name.should.be.ok;
                }).then(done,done);
        });
    });
});

describe.skip('Rename', function() {
    describe('file',function(){
        it('should rename a file',function(done){
            tesseract.operation.rename('b29a98fd160b3b741fe8d767860cb51ecd983392','todo' + new Date() + '.txt')
                .then(function(response){
                    console.log(response);
                    response.success.should.equal(true);
                    response.identifier.should.be.ok;
                    response.name.should.be.ok;
                }).then(done,done);
        });
    });

    describe('folder',function(){
        it('should rename a folder',function(done){
            tesseract.operation.rename('0e2fa86dce6dd8ee66a25e6c7caf0eeeb6779b3d','my folder' + new Date())
                .then(function(response){
                    response.success.should.equal(true);
                    response.identifier.should.be.ok;
                    response.name.should.be.ok;
                }).then(done,done);
        });
    });
});

describe.skip('Move', function() {
    describe('file',function(){
        it('should moved to other folder',function(done){
            tesseract.operation.move('496791de3fea6987c9a7cf31c03d38c5aa68a4bc','0e2fa86dce6dd8ee66a25e6c7caf0eeeb6779b3d')
                .then(function(response){
                    response.success.should.equal(true);
                    response.identifier.should.be.ok;
                    response.name.should.be.ok;
                    return tesseract.operation.move('496791de3fea6987c9a7cf31c03d38c5aa68a4bc','root')
                }).then(function(){done();},done);
        });

    });
});

var tesseract_id;

describe.skip('Copy', function() {
    describe('file',function(){
        it('should copy to other folder',function(done){
            tesseract.operation.copy('496791de3fea6987c9a7cf31c03d38c5aa68a4bc','0e2fa86dce6dd8ee66a25e6c7caf0eeeb6779b3d')
                .then(function(response){
                    response.success.should.equal(true);
                    response.identifier.should.be.ok;
                    response.name.should.be.ok;

                    tesseract_id = response.identifier;
                }).then(done,done);
        });
    });
});

describe.skip('Delete', function() {

    before(function(done){
        if(tesseract_id){
            done();
        }else{
            done(new Error('tesseract_id not set'));
        }
    });

    describe('file',function(){
        it('should deleted the file',function(done){
            tesseract.operation.delete(tesseract_id)
                .then(function(response){
                    response.success.should.equal(true);
                }).then(done,done);
        });
    });
});

describe.skip('Stream', function() {
    this.timeout(10000);

    describe.skip('create and upload file',function(){
        it('should upload a file and return success', function(done){
            tesseract.stream.createAndUploadStream('0e2fa86dce6dd8ee66a25e6c7caf0eeeb6779b3d',fs.createReadStream('test.png'),null,'test.png')
                .then(function(response){
                    console.log(response);
                    response.success.should.equal(true);
                    response.identifier.should.be.ok;
                    response.name.should.be.ok;
                }).then(done,done);
        });
    });

    describe.skip('update file',function(){
        it('should upload a file and return success', function(done){
            tesseract.stream.uploadStream('0e2fa86dce6dd8ee66a25e6c7caf0eeeb6779b3d',fs.createReadStream('test.txt'),null,true)
                .then(function(response){
                    console.log(response);
                    response.success.should.equal(true);
                    response.identifier.should.be.ok;
                    response.name.should.be.ok;
                }).then(done,done);
        });
    });

    describe.skip('download and upload file',function(){
        it('should retreive a stream and upload it', function(done){
            tesseract.stream.downloadStream('0e2fa86dce6dd8ee66a25e6c7caf0eeeb6779b3d')
                .then(function(response){
                    response.mimeType.should.be.ok;
                    return dropbox.stream.createAndUploadStream('/c++',response,response.mimetype,'testing__222.txt');
                })
                .then(function(response){
                    console.log(response);
                    response.success.should.equal(true);
                    response.identifier.should.be.ok;
                    response.name.should.be.ok;
                }).then(done,done);
        });
    });

    describe.skip('download not existing file',function(){
        it('should throw 404 error', function(done){
            tesseract.stream.downloadStream('gyj76476698')
                .catch(function(error){
                    error.success.should.equal(false);
                    error.error_code.should.equal(404);
                }).then(done,done);
        });
    });
});